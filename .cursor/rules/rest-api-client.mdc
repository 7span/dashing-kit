---
description: 
globs: 
alwaysApply: true
---

description: "Rest API Client - Cursor Rules"
alwaysApply: true

## Overview
The `app_client` package provides comprehensive API call functionality with the `RestApiClient` class as the core component for remote data source communication.

## Core Architecture

### RestApiClient Class
- **Primary Purpose**: Connect with remote data sources using Dio as the underlying HTTP client
- **Responsibility**: Execute API requests and handle success/error responses
- **Foundation**: Built on top of Dio for robust HTTP communication

### Supported HTTP Methods
- `GET` - Retrieve data from server
- `POST` - Create new resources
- `PUT` - Update existing resources  
- `DELETE` - Remove resources
- `dynamic` - Flexible method selection based on runtime requirements

## Key Features

### 1. Caching System
- **Implementation**: Optional caching via `DioCacheInterceptor`
- **Storage**: Uses `HiveCacheStore` for local cache persistence
- **Configuration**: Enable/disable through initialization parameters
- **Benefits**: Reduces network calls and improves performance

### 2. Token Management
- **Automatic Handling**: Seamless access and refresh token management
- **Interceptor**: `ApiTokensInterceptor` handles token lifecycle
- **Refresh Logic**: Automatic token refresh when expired
- **Endpoint Exclusion**: Configure endpoints that don't require tokens

### 3. Logging & Debugging
- **Logger**: `PrettyDioLogger` for enhanced API request/response visibility
- **Formatting**: Beautified output for easier debugging
- **Development Aid**: Comprehensive request/response information

### 4. Centralized Error Handling
- **Unified Approach**: Single point for API error management
- **Consistent Response**: Standardized error handling across the application
- **Token Expiry**: Automatic logout trigger on authentication failures

## Initialization Pattern

```dart
await restApiClient.init(
  isApiCacheEnabled: true,                           // Enable caching
  baseURL: 'https://your-api.com',                  // API base URL
  refreshTokenEndpoint: '/auth/refresh',            // Token refresh endpoint
  endPointsToEscapeHeaderToken: ['/auth/login'],    // Endpoints without token
  onForceLogout: () => handleLogout(),              // Logout callback
);
```

## Development Guidelines

### Best Practices
1. **Initialize Once**: Call `init()` during app startup
2. **Error Handling**: Implement proper error handling in consuming code
3. **Token Management**: Configure token-free endpoints appropriately
4. **Caching Strategy**: Enable caching for appropriate endpoints
5. **Logout Handling**: Provide proper logout callback implementation

### Configuration Considerations
- Set appropriate base URL for environment (dev/staging/prod)
- Configure refresh token endpoint correctly
- Identify endpoints that should bypass token authentication
- Implement secure logout mechanism

### Usage Patterns
- Use appropriate HTTP methods for RESTful operations
- Leverage caching for frequently accessed, relatively static data
- Monitor logs during development for request/response debugging
- Handle token refresh scenarios gracefully in UI

## Integration Notes
- Designed to work seamlessly with Flutter/Dart applications
- Integrates with Hive for local storage requirements
- Compatible with standard REST API architectures
- Supports both authenticated and public API endpoints